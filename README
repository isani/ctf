Turn-based capture the flag game for University of Helsinki AI Challenge course

Usage
=====

$ cabal configure
$ cabal build
$ ./dist/build/ctf/ctf config "(cat input_a.txt; cat >/dev/null)" "(cat input_b.txt; cat >/dev/null)"

$ (cd brains; javac Thing RandomWalk)
$ ./dist/build/ctf/ctf config "(cd brains; java RandomWalk)" "(cd brains; java RandomWalk)"

Example input_[ab].txt included.

Brain output format
===================

This is what your brain should output:

<soldiername> <movementdirection> [<grenadecoord>]
<soldiername> <movementdirection> [<grenadecoord>]
...

movementdirection: either U, L, D, R (the 4 directions) or S (stay still)
grenadecoord: optional and should be of the form (<x,y>)

Output format
=============

This is what your brain gets from the engine:

<yourpoints> <enemypoints>
Flag <x> <y>
Soldier <name> <x> <y> <cooldown> <alive> <flag>
Soldier <name> <x> <y> <cooldown> <alive> <flag>
Soldier <name> <x> <y> <cooldown> <alive> <flag>
Grenade <x> <y> <countdown>
EnemyFlag <x> <y>
Enemy <name> <x> <y> <alive> <flag>
Enemy <name> <x> <y> <alive> <flag>
Enemy <name> <x> <y> <alive> <flag>
<an empty line signals the end>

x, y, cooldown, countdown: integers
name: matched by the regex [A-Za-z]+
alive: either "True" or "False"
flag: either "No", "A", or "B"

The entries are always in this order. There number of Soldier, Enemy
and Grenade records can vary, but there will always be exactly one
Flag and exactly one EnemyFlag record.

Config format
=============

The first line should contain a Rules struct in Haskell format.

The rest of the lines should describe the game map, one character per
tile, rows ended by newlines. All lines should be of equal length. The
meanings of the characters are:

'.' - empty
'#' - obstacle
'A' - spawn of team A
'B' - spawn of team B
'a' - flag of team A
'b' - flag of team B

See the provided file "config" for an example.

TODO
====

- timeouts for reading commands?



